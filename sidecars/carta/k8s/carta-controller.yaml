---
apiVersion: v1
kind: ConfigMap
metadata:
  name: carta-controller-config
data:
  config.json: |
    {
      "$schema": "https://cartavis.org/schemas/controller_config_schema_2.json",
      "controllerConfigVersion": "2.0",
      "authProviders": {
        "forwardAuth": { "headerKey": "carta-auth-token" }
      },
      "database": {
        "uri": "mongodb://carta-mongodb:27017",
        "databaseName": "CARTA"
      },
      "serverPort": 8000,
      "serverInterface": "0.0.0.0",
      "httpOnly": true,
      "dashboardAddress": "/dashboard",
      "processCommand": "",
      "killCommand": "",
      "rootFolderTemplate": "/home/{username}",
      "baseFolderTemplate": "/home/{username}",
      "logFile": "/var/log/carta/controller.log",
      "logTypeConsole": "text",
      "logTypeFile": "text",
      "logLevelFile": "debug",
      "logLevelConsole": "debug",
      "timezone": "America/Vancouver"
    }
---
# --- MongoDB (ephemeral; NO auth; for dev only)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carta-mongodb
  labels: { app: carta-mongodb }
spec:
  replicas: 1
  selector:
    matchLabels: { app: carta-mongodb }
  template:
    metadata:
      labels: { app: carta-mongodb }
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
      volumes:
        - name: data
          emptyDir: {}     # ephemeral
      containers:
        - name: mongodb
          image: mongodb/mongodb-community-server:latest
          args: ["--bind_ip_all"]
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: data
              mountPath: /data/db
          resources:
            requests: { cpu: "100m", memory: "256Mi" }
            limits:   { cpu: "1",    memory: "1Gi" }
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            capabilities: { drop: ["ALL"] }
          livenessProbe:
            tcpSocket: { port: 27017 }
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket: { port: 27017 }
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: carta-mongodb
  labels: { app: carta-mongodb }
spec:
  selector: { app: carta-mongodb }
  ports:
    - name: mongo
      port: 27017
      targetPort: 27017
---
# --- CARTA Controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carta-controller
  labels: { app: carta-controller }
spec:
  replicas: 1
  selector:
    matchLabels: { app: carta-controller }
  template:
    metadata:
      labels: { app: carta-controller }
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 99999
        seccompProfile: { type: RuntimeDefault }
      volumes:
        - name: config
          configMap:
            name: carta-controller-config
            items:
              - key: config.json
                path: config.json
      containers:
        - name: controller
          image: images.canfar.net/skaha-system/carta-controller@sha256:030b5d0f37ac8f35da7386a49a875ecb771131751ecb7df2d617f28f50636c91
          args: ["carta-controller", "--config", "/etc/carta/config.json"]
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: config
              mountPath: /etc/carta
              readOnly: true
          env:
            - name: TZ
              value: "America/Vancouver"
          resources:
            requests: { cpu: "100m", memory: "256Mi" }
            limits:   { cpu: "1",    memory: "1Gi" }
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            capabilities: { drop: ["ALL"] }
          # Controller’s auth/status needs a header; use a simple TCP probe for liveness/readiness.
          livenessProbe:
            tcpSocket: { port: 8000 }
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket: { port: 8000 }
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: carta-controller
  labels: { app: carta-controller }
spec:
  selector: { app: carta-controller }
  ports:
    - name: http
      port: 8000
      targetPort: 8000
---
# --- (optional) allow controller→mongodb traffic if you run default-deny policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: controller-to-mongo-connection
spec:
  podSelector:
    matchLabels:
      app: carta-mongodb
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: carta-controller
      ports:
        - protocol: TCP
          port: 27017
